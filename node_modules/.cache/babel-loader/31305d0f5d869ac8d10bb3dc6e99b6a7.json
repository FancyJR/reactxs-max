{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcCascader from 'rc-cascader';\nimport arrayTreeFilter from 'array-tree-filter';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport Input from '../input';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning'; // We limit the filtered item count by default\n\nvar defaultLimit = 50;\n\nfunction highlightKeyword(str, keyword, prefixCls) {\n  return str.split(keyword).map(function (node, index) {\n    return index === 0 ? node : [React.createElement('span', {\n      className: prefixCls + '-menu-item-keyword',\n      key: 'seperator'\n    }, keyword), node];\n  });\n}\n\nfunction defaultFilterOption(inputValue, path, names) {\n  return path.some(function (option) {\n    return option[names.label].indexOf(inputValue) > -1;\n  });\n}\n\nfunction defaultRenderFilteredOption(inputValue, path, prefixCls, names) {\n  return path.map(function (option, index) {\n    var label = option[names.label];\n    var node = label.indexOf(inputValue) > -1 ? highlightKeyword(label, inputValue, prefixCls) : label;\n    return index === 0 ? node : [' / ', node];\n  });\n}\n\nfunction defaultSortFilteredOption(a, b, inputValue, names) {\n  function callback(elem) {\n    return elem[names.label].indexOf(inputValue) > -1;\n  }\n\n  return a.findIndex(callback) - b.findIndex(callback);\n}\n\nfunction getFieldNames(props) {\n  var fieldNames = props.fieldNames,\n      filedNames = props.filedNames;\n\n  if ('filedNames' in props) {\n    return filedNames; // For old compatibility\n  }\n\n  return fieldNames;\n}\n\nfunction getFilledFieldNames(props) {\n  var fieldNames = getFieldNames(props) || {};\n  var names = {\n    children: fieldNames.children || 'children',\n    label: fieldNames.label || 'label',\n    value: fieldNames.value || 'value'\n  };\n  return names;\n}\n\nvar defaultDisplayRender = function defaultDisplayRender(label) {\n  return label.join(' / ');\n};\n\nvar Cascader = function (_React$Component) {\n  _inherits(Cascader, _React$Component);\n\n  function Cascader(props) {\n    _classCallCheck(this, Cascader);\n\n    var _this = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).call(this, props));\n\n    _this.handleChange = function (value, selectedOptions) {\n      _this.setState({\n        inputValue: ''\n      });\n\n      if (selectedOptions[0].__IS_FILTERED_OPTION) {\n        var unwrappedValue = value[0];\n        var unwrappedSelectedOptions = selectedOptions[0].path;\n\n        _this.setValue(unwrappedValue, unwrappedSelectedOptions);\n\n        return;\n      }\n\n      _this.setValue(value, selectedOptions);\n    };\n\n    _this.handlePopupVisibleChange = function (popupVisible) {\n      if (!('popupVisible' in _this.props)) {\n        _this.setState({\n          popupVisible: popupVisible,\n          inputFocused: popupVisible,\n          inputValue: popupVisible ? _this.state.inputValue : ''\n        });\n      }\n\n      var onPopupVisibleChange = _this.props.onPopupVisibleChange;\n\n      if (onPopupVisibleChange) {\n        onPopupVisibleChange(popupVisible);\n      }\n    };\n\n    _this.handleInputBlur = function () {\n      _this.setState({\n        inputFocused: false\n      });\n    };\n\n    _this.handleInputClick = function (e) {\n      var _this$state = _this.state,\n          inputFocused = _this$state.inputFocused,\n          popupVisible = _this$state.popupVisible; // Prevent `Trigger` behaviour.\n\n      if (inputFocused || popupVisible) {\n        e.stopPropagation();\n\n        if (e.nativeEvent.stopImmediatePropagation) {\n          e.nativeEvent.stopImmediatePropagation();\n        }\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      if (e.keyCode === KeyCode.BACKSPACE) {\n        e.stopPropagation();\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      var inputValue = e.target.value;\n\n      _this.setState({\n        inputValue: inputValue\n      });\n    };\n\n    _this.setValue = function (value) {\n      var selectedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(value, selectedOptions);\n      }\n    };\n\n    _this.clearSelection = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (!_this.state.inputValue) {\n        _this.setValue([]);\n\n        _this.handlePopupVisibleChange(false);\n      } else {\n        _this.setState({\n          inputValue: ''\n        });\n      }\n    };\n\n    _this.saveInput = function (node) {\n      _this.input = node;\n    };\n\n    _this.renderCascader = function (_ref, locale) {\n      var _classNames, _classNames2, _classNames3, _classNames4;\n\n      var getContextPopupContainer = _ref.getPopupContainer;\n      var props = _this.props,\n          state = _this.state;\n\n      var prefixCls = props.prefixCls,\n          inputPrefixCls = props.inputPrefixCls,\n          children = props.children,\n          _props$placeholder = props.placeholder,\n          placeholder = _props$placeholder === undefined ? locale.placeholder : _props$placeholder,\n          size = props.size,\n          disabled = props.disabled,\n          className = props.className,\n          style = props.style,\n          allowClear = props.allowClear,\n          _props$showSearch = props.showSearch,\n          showSearch = _props$showSearch === undefined ? false : _props$showSearch,\n          suffixIcon = props.suffixIcon,\n          otherProps = __rest(props, [\"prefixCls\", \"inputPrefixCls\", \"children\", \"placeholder\", \"size\", \"disabled\", \"className\", \"style\", \"allowClear\", \"showSearch\", \"suffixIcon\"]);\n\n      var value = state.value,\n          inputFocused = state.inputFocused;\n      var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, inputPrefixCls + '-lg', size === 'large'), _defineProperty(_classNames, inputPrefixCls + '-sm', size === 'small'), _classNames));\n      var clearIcon = allowClear && !disabled && value.length > 0 || state.inputValue ? React.createElement(Icon, {\n        type: 'close-circle',\n        theme: 'filled',\n        className: prefixCls + '-picker-clear',\n        onClick: _this.clearSelection\n      }) : null;\n      var arrowCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-picker-arrow', true), _defineProperty(_classNames2, prefixCls + '-picker-arrow-expand', state.popupVisible), _classNames2));\n      var pickerCls = classNames(className, prefixCls + '-picker', (_classNames3 = {}, _defineProperty(_classNames3, prefixCls + '-picker-with-value', state.inputValue), _defineProperty(_classNames3, prefixCls + '-picker-disabled', disabled), _defineProperty(_classNames3, prefixCls + '-picker-' + size, !!size), _defineProperty(_classNames3, prefixCls + '-picker-show-search', !!showSearch), _defineProperty(_classNames3, prefixCls + '-picker-focused', inputFocused), _classNames3)); // Fix bug of https://github.com/facebook/react/pull/5004\n      // and https://fb.me/react-unknown-prop\n\n      var inputProps = omit(otherProps, ['onChange', 'options', 'popupPlacement', 'transitionName', 'displayRender', 'onPopupVisibleChange', 'changeOnSelect', 'expandTrigger', 'popupVisible', 'getPopupContainer', 'loadData', 'popupClassName', 'filterOption', 'renderFilteredOption', 'sortFilteredOption', 'notFoundContent', 'fieldNames', 'filedNames']);\n      var options = props.options;\n\n      if (state.inputValue) {\n        options = _this.generateFilteredOptions(prefixCls);\n      } // Dropdown menu should keep previous status until it is fully closed.\n\n\n      if (!state.popupVisible) {\n        options = _this.cachedOptions;\n      } else {\n        _this.cachedOptions = options;\n      }\n\n      var dropdownMenuColumnStyle = {};\n      var isNotFound = (options || []).length === 1 && options[0].value === 'ANT_CASCADER_NOT_FOUND';\n\n      if (isNotFound) {\n        dropdownMenuColumnStyle.height = 'auto'; // Height of one row.\n      } // The default value of `matchInputWidth` is `true`\n\n\n      var resultListMatchInputWidth = showSearch.matchInputWidth === false ? false : true;\n\n      if (resultListMatchInputWidth && state.inputValue && _this.input) {\n        dropdownMenuColumnStyle.width = _this.input.input.offsetWidth;\n      }\n\n      var inputIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n        className: classNames((_classNames4 = {}, _defineProperty(_classNames4, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames4, prefixCls + '-picker-arrow', true), _classNames4))\n      }) : React.createElement('span', {\n        className: prefixCls + '-picker-arrow'\n      }, suffixIcon)) || React.createElement(Icon, {\n        type: 'down',\n        className: arrowCls\n      });\n      var input = children || React.createElement('span', {\n        style: style,\n        className: pickerCls\n      }, React.createElement('span', {\n        className: prefixCls + '-picker-label'\n      }, _this.getLabel()), React.createElement(Input, _extends({}, inputProps, {\n        ref: _this.saveInput,\n        prefixCls: inputPrefixCls,\n        placeholder: value && value.length > 0 ? undefined : placeholder,\n        className: prefixCls + '-input ' + sizeCls,\n        value: state.inputValue,\n        disabled: disabled,\n        readOnly: !showSearch,\n        autoComplete: 'off',\n        onClick: showSearch ? _this.handleInputClick : undefined,\n        onBlur: showSearch ? _this.handleInputBlur : undefined,\n        onKeyDown: _this.handleKeyDown,\n        onChange: showSearch ? _this.handleInputChange : undefined\n      })), clearIcon, inputIcon);\n      var expandIcon = React.createElement(Icon, {\n        type: 'right'\n      });\n      var loadingIcon = React.createElement('span', {\n        className: prefixCls + '-menu-item-loading-icon'\n      }, React.createElement(Icon, {\n        type: 'redo',\n        spin: true\n      }));\n      var getPopupContainer = props.getPopupContainer || getContextPopupContainer;\n      var rest = omit(props, ['inputIcon', 'expandIcon', 'loadingIcon']);\n      return React.createElement(RcCascader, _extends({}, rest, {\n        getPopupContainer: getPopupContainer,\n        options: options,\n        value: value,\n        popupVisible: state.popupVisible,\n        onPopupVisibleChange: _this.handlePopupVisibleChange,\n        onChange: _this.handleChange,\n        dropdownMenuColumnStyle: dropdownMenuColumnStyle,\n        expandIcon: expandIcon,\n        loadingIcon: loadingIcon\n      }), input);\n    };\n\n    _this.state = {\n      value: props.value || props.defaultValue || [],\n      inputValue: '',\n      inputFocused: false,\n      popupVisible: props.popupVisible,\n      flattenOptions: props.showSearch ? _this.flattenTree(props.options, props) : undefined\n    };\n    return _this;\n  }\n\n  _createClass(Cascader, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if ('value' in nextProps) {\n        this.setState({\n          value: nextProps.value || []\n        });\n      }\n\n      if ('popupVisible' in nextProps) {\n        this.setState({\n          popupVisible: nextProps.popupVisible\n        });\n      }\n\n      if (nextProps.showSearch && this.props.options !== nextProps.options) {\n        this.setState({\n          flattenOptions: this.flattenTree(nextProps.options, nextProps)\n        });\n      }\n    }\n  }, {\n    key: 'getLabel',\n    value: function getLabel() {\n      var _props = this.props,\n          options = _props.options,\n          _props$displayRender = _props.displayRender,\n          displayRender = _props$displayRender === undefined ? defaultDisplayRender : _props$displayRender;\n      var names = getFilledFieldNames(this.props);\n      var value = this.state.value;\n      var unwrappedValue = Array.isArray(value[0]) ? value[0] : value;\n      var selectedOptions = arrayTreeFilter(options, function (o, level) {\n        return o[names.value] === unwrappedValue[level];\n      }, {\n        childrenKeyName: names.children\n      });\n      var label = selectedOptions.map(function (o) {\n        return o[names.label];\n      });\n      return displayRender(label, selectedOptions);\n    }\n  }, {\n    key: 'flattenTree',\n    value: function flattenTree(options, props) {\n      var _this2 = this;\n\n      var ancestor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var names = getFilledFieldNames(props);\n      var flattenOptions = [];\n      var childrenName = names.children;\n      options.forEach(function (option) {\n        var path = ancestor.concat(option);\n\n        if (props.changeOnSelect || !option[childrenName] || !option[childrenName].length) {\n          flattenOptions.push(path);\n        }\n\n        if (option[childrenName]) {\n          flattenOptions = flattenOptions.concat(_this2.flattenTree(option[childrenName], props, path));\n        }\n      });\n      return flattenOptions;\n    }\n  }, {\n    key: 'generateFilteredOptions',\n    value: function generateFilteredOptions(prefixCls) {\n      var _this3 = this,\n          _ref3;\n\n      var _props2 = this.props,\n          showSearch = _props2.showSearch,\n          notFoundContent = _props2.notFoundContent;\n      var names = getFilledFieldNames(this.props);\n      var _showSearch$filter = showSearch.filter,\n          filter = _showSearch$filter === undefined ? defaultFilterOption : _showSearch$filter,\n          _showSearch$render = showSearch.render,\n          render = _showSearch$render === undefined ? defaultRenderFilteredOption : _showSearch$render,\n          _showSearch$sort = showSearch.sort,\n          sort = _showSearch$sort === undefined ? defaultSortFilteredOption : _showSearch$sort,\n          _showSearch$limit = showSearch.limit,\n          limit = _showSearch$limit === undefined ? defaultLimit : _showSearch$limit;\n      var _state = this.state,\n          _state$flattenOptions = _state.flattenOptions,\n          flattenOptions = _state$flattenOptions === undefined ? [] : _state$flattenOptions,\n          inputValue = _state.inputValue; // Limit the filter if needed\n\n      var filtered = void 0;\n\n      if (limit > 0) {\n        filtered = [];\n        var matchCount = 0; // Perf optimization to filter items only below the limit\n\n        flattenOptions.some(function (path) {\n          var match = filter(_this3.state.inputValue, path, names);\n\n          if (match) {\n            filtered.push(path);\n            matchCount += 1;\n          }\n\n          return matchCount >= limit;\n        });\n      } else {\n        warning(typeof limit !== 'number', \"'limit' of showSearch in Cascader should be positive number or false.\");\n        filtered = flattenOptions.filter(function (path) {\n          return filter(_this3.state.inputValue, path, names);\n        });\n      }\n\n      filtered.sort(function (a, b) {\n        return sort(a, b, inputValue, names);\n      });\n\n      if (filtered.length > 0) {\n        return filtered.map(function (path) {\n          var _ref2;\n\n          return _ref2 = {\n            __IS_FILTERED_OPTION: true,\n            path: path\n          }, _defineProperty(_ref2, names.label, render(inputValue, path, prefixCls, names)), _defineProperty(_ref2, names.value, path.map(function (o) {\n            return o[names.value];\n          })), _defineProperty(_ref2, 'disabled', path.some(function (o) {\n            return !!o.disabled;\n          })), _ref2;\n        });\n      }\n\n      return [(_ref3 = {}, _defineProperty(_ref3, names.label, notFoundContent), _defineProperty(_ref3, names.value, 'ANT_CASCADER_NOT_FOUND'), _defineProperty(_ref3, 'disabled', true), _ref3)];\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(ConfigConsumer, null, function (configArgument) {\n        return React.createElement(LocaleReceiver, null, function (locale) {\n          return _this4.renderCascader(configArgument, locale);\n        });\n      });\n    }\n  }]);\n\n  return Cascader;\n}(React.Component);\n\nexport default Cascader;\nCascader.defaultProps = {\n  prefixCls: 'ant-cascader',\n  inputPrefixCls: 'ant-input',\n  transitionName: 'slide-up',\n  popupPlacement: 'bottomLeft',\n  options: [],\n  disabled: false,\n  allowClear: true,\n  notFoundContent: 'Not Found'\n};","map":null,"metadata":{},"sourceType":"module"}